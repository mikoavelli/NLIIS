import tkinter as tk
from tkinter import ttk, messagebox
from idlelib.tooltip import Hovertip
import threading
import os
import subprocess
import sys

from summarizer import DocumentSummarizer
from watcher import FileSystemWatcher

# --- Constants ---
ROOT_DOCS_FOLDER = "corpus_root"


class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Document Summarization System: Algorithmic vs. AI")
        self.root.geometry("1400x800")

        self.setup_styles()
        self.setup_ui()

        if not os.path.exists(ROOT_DOCS_FOLDER):
            os.makedirs(ROOT_DOCS_FOLDER)
            messagebox.showinfo("Setup",
                                f"Root folder '{ROOT_DOCS_FOLDER}' was created.\nPlease add .txt files to it for summarization.")

        self.summarizer = None
        self.all_filepaths = []

        self.root.after(100, self.initialize_system)
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def initialize_system(self):
        self.status_var.set("Building corpus statistics...")
        self.root.config(cursor="watch") 
        self.root.update_idletasks()
        self.all_filepaths = self.get_all_filepaths()
        if not self.all_filepaths:
            self.status_var.set(f"No .txt files found in '{ROOT_DOCS_FOLDER}'.") 
            self.root.config(cursor="") 
            return
        self.summarizer = DocumentSummarizer(self.all_filepaths)
        self.populate_file_list()
        self.watcher = FileSystemWatcher(path=ROOT_DOCS_FOLDER, event_queue=None)
        self.watcher.on_change_callback = self.on_filesystem_change
        self.thread = threading.Thread(target=self.watcher.run, daemon=True) 
        self.thread.start()
        self.root.config(cursor="") 
        self.status_var.set("System ready.")

    def on_filesystem_change(self):
        self.root.after(0, self.refresh_file_list)

    def get_all_filepaths(self):
        filepaths = []
        for dirpath, _, filenames in os.walk(ROOT_DOCS_FOLDER):
            for filename in filenames:
                if filename.endswith(".txt"): filepaths.append(os.path.join(dirpath, filename))
        return sorted(filepaths)

    def setup_styles(self):
        style = ttk.Style() 
        style.theme_use("clam")
        style.configure("Treeview", rowheight=25, font=('TkDefaultFont', 11))
        style.configure("Treeview.Heading", font=('TkDefaultFont', 11, 'bold'))

    def setup_ui(self):
        paned_window = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        paned_window.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        left_frame = ttk.Frame(paned_window, width=400)
        ttk.Label(left_frame, text="Document Corpus", font=('TkDefaultFont', 12, 'bold')).pack(pady=5)
        tree_frame = ttk.Frame(left_frame) 
        tree_frame.pack(fill=tk.BOTH, expand=True)
        self.tree_files = ttk.Treeview(tree_frame, show="tree", columns=("filepath",))
        self.tree_files.column("#0", width=350) 
        self.tree_files.column("filepath", width=0, stretch=tk.NO)
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree_files.yview)
        self.tree_files.configure(yscrollcommand=vsb.set) 
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree_files.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        paned_window.add(left_frame, weight=1)
        Hovertip(self.tree_files,
                 "List of .txt files found in the corpus.\nClick a file to generate summaries.\nDouble-click to open the file.",
                 hover_delay=500)

        right_panel = ttk.Frame(paned_window)

        algo_frame = ttk.LabelFrame(right_panel, text="Algorithmic (Extractive) Method", padding=10)
        algo_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5))

        ttk.Label(algo_frame, text="Keywords:").pack(anchor='w')
        self.algo_kw_text = tk.Text(algo_frame, wrap=tk.WORD, height=4, state="disabled")
        self.algo_kw_text.pack(fill=tk.BOTH, expand=True, pady=(2, 5))
        Hovertip(self.algo_kw_text, "Keywords extracted based on TF-IDF word weights.", hover_delay=500)

        ttk.Label(algo_frame, text="Classic Summary:").pack(anchor='w')
        self.algo_classic_text = tk.Text(algo_frame, wrap=tk.WORD, height=8, state="disabled")
        self.algo_classic_text.pack(fill=tk.BOTH, expand=True, pady=(2, 0))
        Hovertip(self.algo_classic_text, "Summary created by extracting the most important sentences from the text.",
                 hover_delay=500)

        ollama_frame = ttk.LabelFrame(right_panel, text="Ollama (Abstractive) Method", padding=10)
        ollama_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))

        ttk.Label(ollama_frame, text="Keywords:").pack(anchor='w')
        self.ollama_kw_text = tk.Text(ollama_frame, wrap=tk.WORD, height=4, state="disabled")
        self.ollama_kw_text.pack(fill=tk.BOTH, expand=True, pady=(2, 5))
        Hovertip(self.ollama_kw_text, "Keywords and key phrases generated by the Ollama AI model.", hover_delay=500)

        ttk.Label(ollama_frame, text="Classic Summary:").pack(anchor='w')
        self.ollama_classic_text = tk.Text(ollama_frame, wrap=tk.WORD, height=8, state="disabled")
        self.ollama_classic_text.pack(fill=tk.BOTH, expand=True, pady=(2, 0))
        Hovertip(self.ollama_classic_text, "A concise, human-like summary generated by the Ollama AI model.",
                 hover_delay=500)

        paned_window.add(right_panel, weight=3)

        self.status_var = tk.StringVar(value="Initializing...")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        Hovertip(status_bar, "Displays the current status of the application.", hover_delay=500)

        self.tree_files.bind("<<TreeviewSelect>>", self.on_file_select)
        self.tree_files.bind("<Double-1>", self.on_file_double_click)

    def populate_file_list(self):
        self.tree_files.delete(*self.tree_files.get_children())
        root_node = self.tree_files.insert("", "end", text=ROOT_DOCS_FOLDER, open=True)
        paths = {}
        for path in self.all_filepaths:
            parent = root_node
            parts = os.path.relpath(path, ROOT_DOCS_FOLDER).split(os.sep)
            for i, part in enumerate(parts):
                node_path = os.path.join(ROOT_DOCS_FOLDER, *parts[:i + 1])
                if node_path not in paths:
                    is_file = (i == len(parts) - 1)
                    node = self.tree_files.insert(parent, "end", text=part, values=(path if is_file else "",))
                    paths[node_path] = node
                parent = paths[node_path]

    def refresh_file_list(self):
        self.status_var.set("File system changed! Re-building corpus...") 
        self.root.config(cursor="watch") 
        self.root.update_idletasks()
        self.all_filepaths = self.get_all_filepaths() 
        self.summarizer = DocumentSummarizer(self.all_filepaths)
        self.populate_file_list() 
        self.root.config(cursor="") 
        self.status_var.set("System re-initialized.")

    def on_file_select(self, event):
        selected_item = self.tree_files.selection() 
        if not selected_item: return
        filepath = self.tree_files.item(selected_item[0], "values")[0]
        if not filepath or not os.path.isfile(filepath): return
        self._update_summary_display(None, is_loading=True)
        self.status_var.set(f"Summarizing '{os.path.basename(filepath)}'...")
        self.root.config(cursor="watch")
        threading.Thread(target=self._run_summarization_thread, args=(filepath,), daemon=True).start()

    def on_file_double_click(self, event):
        selected_item = self.tree_files.selection() 
        if not selected_item: return
        filepath = self.tree_files.item(selected_item[0], "values")[0]
        if not filepath or not os.path.isfile(filepath): return
        try:
            if sys.platform == "win32":
                os.startfile(filepath)
            elif sys.platform == "darwin":
                subprocess.call(["open", filepath])
            else:
                subprocess.call(["xdg-open", filepath])
        except Exception as e:
            messagebox.showerror("Error", f"Could not open file: {e}")

    def _run_summarization_thread(self, filepath):
        all_summaries = self.summarizer.create_all_summaries(filepath)
        self.root.after(0, self._update_summary_display, all_summaries)

    def _update_summary_display(self, all_summaries, is_loading=False):
        text_widgets = [self.algo_kw_text, self.algo_classic_text, self.ollama_kw_text, self.ollama_classic_text]
        for widget in text_widgets:
            widget.config(state="normal") 
            widget.delete("1.0", tk.END)

        if is_loading:
            for widget in text_widgets: widget.insert("1.0", "Generating summary...")
        elif all_summaries:
            algo_summaries = all_summaries.get('algorithmic', {})
            ollama_summaries = all_summaries.get('ollama', {})
            self.algo_kw_text.insert("1.0", algo_summaries.get('keywords', 'N/A'))
            self.algo_classic_text.insert("1.0", algo_summaries.get('classic', 'N/A'))
            self.ollama_kw_text.insert("1.0", ollama_summaries.get('keywords', 'N/A'))
            self.ollama_classic_text.insert("1.0", ollama_summaries.get('classic', 'N/A'))
        else:
            for widget in text_widgets: widget.insert("1.0", "An error occurred during summarization.")

        for widget in text_widgets: widget.config(state="disabled")
        self.root.config(cursor="") 
        self.status_var.set("Summaries loaded.")

    def on_closing(self):
        if hasattr(self, 'watcher'): self.watcher.stop()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = MainApp(root)
    root.mainloop()