import tkinter as tk
from tkinter import ttk, messagebox
import threading
import os
import subprocess
import sys
import queue
from idlelib.tooltip import Hovertip

from summarizer import DocumentSummarizer
from watcher import FileSystemWatcher

# --- Constants ---
ROOT_DOCS_FOLDER = "corpus_root"
CHECK_QUEUE_TIME = 2000


class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Automatic Document Summarization System")
        self.root.geometry("1200x800")

        self.setup_styles()
        self.setup_ui()

        if not os.path.exists(ROOT_DOCS_FOLDER):
            os.makedirs(ROOT_DOCS_FOLDER)
            messagebox.showinfo("Setup",
                                f"Root folder '{ROOT_DOCS_FOLDER}' was created.\nPlease add .txt files to it for summarization.")

        self.summarizer = None
        self.all_filepaths = []
        self.event_queue = queue.Queue()

        self.root.after(100, self.initialize_system)
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def initialize_system(self):
        self.status_var.set("Building corpus statistics... This may take a moment.")
        self.root.config(cursor="watch")
        self.root.update_idletasks()

        self.all_filepaths = self.get_all_filepaths()

        if not self.all_filepaths:
            self.status_var.set(f"No .txt files found in '{ROOT_DOCS_FOLDER}'. Please add some files.")
            self.root.config(cursor="")
        else:
            self.summarizer = DocumentSummarizer(self.all_filepaths)
            self.populate_file_list()
            self.status_var.set("System ready. Select a file to summarize.")

        self.watcher = FileSystemWatcher(path=ROOT_DOCS_FOLDER, event_queue=self.event_queue)
        self.thread = threading.Thread(target=self.watcher.run, daemon=True)
        self.thread.start()

        self.check_queue_for_updates()

        self.root.config(cursor="")

    def check_queue_for_updates(self):
        """Checks the queue for messages from the watcher thread."""
        try:
            if self.event_queue.get_nowait() == "rescan_needed":
                print("Main: Queue received 'rescan_needed' message.")
                self.refresh_file_list()
        except queue.Empty:
            pass
        finally:
            self.root.after(CHECK_QUEUE_TIME, self.check_queue_for_updates)

    @staticmethod
    def get_all_filepaths():
        filepaths = []
        for dirpath, _, filenames in os.walk(ROOT_DOCS_FOLDER):
            for filename in filenames:
                if filename.endswith(".txt"):
                    filepaths.append(os.path.join(dirpath, filename))
        return sorted(filepaths)

    @staticmethod
    def setup_styles():
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview", rowheight=25, font=('TkDefaultFont', 11))
        style.configure("Treeview.Heading", font=('TkDefaultFont', 11, 'bold'))

    def setup_ui(self):
        paned_window = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        paned_window.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        left_frame = ttk.Frame(paned_window)
        ttk.Label(left_frame, text="Document Corpus", font=('TkDefaultFont', 12, 'bold')).pack(pady=5)
        tree_frame = ttk.Frame(left_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        self.tree_files = ttk.Treeview(tree_frame, show="tree", columns=("filepath",))
        self.tree_files.column("#0", width=300)
        self.tree_files.column("filepath", width=0, stretch=tk.NO)
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree_files.yview)
        self.tree_files.configure(yscrollcommand=vsb.set)
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree_files.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        Hovertip(self.tree_files,
                 "Displays all .txt documents in 'corpus_root'.\nSelect a file to summarize.\nDouble-click to open it in your text editor.")
        paned_window.add(left_frame, weight=1)
        right_frame = ttk.Frame(paned_window)
        kw_frame = ttk.LabelFrame(right_frame, text="Keyword Summary (Generated by Ollama)", padding=10)
        kw_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
        self.kw_summary_text = tk.Text(kw_frame, wrap=tk.WORD, height=5, state="disabled")
        self.kw_summary_text.pack(fill=tk.BOTH, expand=True)
        Hovertip(self.kw_summary_text,
                 "Keyword summary generated by the Ollama language model.\nThis lists the main topics and concepts from the text.")
        classic_frame = ttk.LabelFrame(right_frame, text="Classic (Extractive) Summary", padding=10)
        classic_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
        self.classic_summary_text = tk.Text(classic_frame, wrap=tk.WORD, height=15, state="disabled")
        self.classic_summary_text.pack(fill=tk.BOTH, expand=True)
        Hovertip(self.classic_summary_text,
                 "Classic extractive summary.\nThis is a collection of the most important sentences from the original document, preserving their original wording.")
        paned_window.add(right_frame, weight=3)
        self.status_var = tk.StringVar(value="Initializing...")
        ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN).pack(side=tk.BOTTOM, fill=tk.X)
        self.tree_files.bind("<<TreeviewSelect>>", self.on_file_select)
        self.tree_files.bind("<Double-1>", self.on_file_double_click)

    def populate_file_list(self):
        self.tree_files.delete(*self.tree_files.get_children())
        root_node = self.tree_files.insert("", "end", text=ROOT_DOCS_FOLDER, open=True)
        paths = {}
        for path in self.all_filepaths:
            parent = root_node
            parts = os.path.relpath(path, ROOT_DOCS_FOLDER).split(os.sep)
            for i, part in enumerate(parts):
                node_path = os.path.join(ROOT_DOCS_FOLDER, *parts[:i + 1])
                if node_path not in paths:
                    is_file = (i == len(parts) - 1)
                    node = self.tree_files.insert(parent, "end", text=part, values=(path if is_file else "",))
                    paths[node_path] = node
                parent = paths[node_path]

    def refresh_file_list(self):
        self.status_var.set("File system changed! Re-building corpus stats and reloading files...")
        self.root.config(cursor="watch")
        self.root.update_idletasks()
        self.all_filepaths = self.get_all_filepaths()
        self.summarizer = DocumentSummarizer(self.all_filepaths)
        self.populate_file_list()
        self.root.config(cursor="")
        self.status_var.set("System re-initialized. Select a file to summarize.")

    def on_file_select(self, event):
        selected_item = self.tree_files.selection()
        if not selected_item: return
        filepath = self.tree_files.item(selected_item[0], "values")[0]
        if not filepath or not os.path.isfile(filepath): return
        self._update_summary_display({'keywords': "Generating summary...", 'classic': "Generating summary..."})
        self.status_var.set(f"Summarizing '{os.path.basename(filepath)}'...")
        self.root.config(cursor="watch")
        threading.Thread(target=self._run_summarization_thread, args=(filepath,), daemon=True).start()

    def on_file_double_click(self, event):
        selected_item = self.tree_files.selection()
        if not selected_item: return
        filepath = self.tree_files.item(selected_item[0], "values")[0]
        if not filepath or not os.path.isfile(filepath): return
        try:
            if sys.platform == "win32":
                os.startfile(filepath)
            elif sys.platform == "darwin":
                subprocess.call(["open", filepath])
            else:
                subprocess.call(["xdg-open", filepath])
        except Exception as e:
            messagebox.showerror("Error", f"Could not open file: {e}")

    def _run_summarization_thread(self, filepath):
        summaries = self.summarizer.create_summaries(filepath)
        self.root.after(0, self._update_summary_display, summaries)

    def _update_summary_display(self, summaries):
        self.kw_summary_text.config(state="normal")
        self.kw_summary_text.delete("1.0", tk.END)
        self.kw_summary_text.insert("1.0", summaries.get('keywords', ''))
        self.kw_summary_text.config(state="disabled")
        self.classic_summary_text.config(state="normal")
        self.classic_summary_text.delete("1.0", tk.END)
        self.classic_summary_text.insert("1.0", summaries.get('classic', ''))
        self.classic_summary_text.config(state="disabled")
        self.root.config(cursor="")
        self.status_var.set("Summaries loaded. Select another file.")

    def on_closing(self):
        print("Application shutting down.")
        if hasattr(self, 'watcher'): self.watcher.stop()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = MainApp(root)
    root.mainloop()